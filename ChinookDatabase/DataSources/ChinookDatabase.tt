<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".txt" encoding="utf-8"#>
<#@ include file="../_T4Templates/Chinook.ttinclude"#>
<#@ include file="../_T4Templates/Manager.ttinclude"#>
<#

var options = new 
{
	DatabaseName = "Chinook",
	PopulateDatabase = true,
	Version = DataSetHelper.GetVersionNumber(),
	DataSource = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "_Xml", "ChinookData.xml"),
	DdlStrategies = new IDdlStrategy[] 
							{
								new SqlServerStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None, Encoding = Encoding.Unicode },
								new SqlServerStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Identity, Encoding = Encoding.Unicode },
								new SqlServerCompactStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None },
								new SqlServerCompactStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Identity },
								new SqliteStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None },
								new SqliteStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Identity, PrimaryKeyDef = KeyDefinition.OnCreateTableColumn },
								new MySqlStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None },
								new MySqlStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Identity },
								new OracleStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None, Encoding = Encoding.UTF8 },
								new PostgreSqlStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None, Encoding = Encoding.Default },
								new PostgreSqlStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Identity, Encoding = Encoding.Default },
								new PostgreSqlStrategy { PrimaryKeyStrategy = PrimaryKeyStrategy.Serial, Encoding = Encoding.Default },
								new Db2Strategy { PrimaryKeyStrategy = PrimaryKeyStrategy.None, Encoding = Encoding.Default }
						   	},
	OutputFiles = new List<OutputFile>()
};


// Read the data model
var json = File.ReadAllText(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "ChinookData.json"));
var ds = JsonConvert.DeserializeObject<ChinookDataSet>(json);
var tables = ds.Tables.Cast<DataTable>().OrderBy(t => t.TableName);

var fileManager = Manager.Create(Host, GenerationEnvironment);

foreach (IDdlStrategy strategy in options.DdlStrategies)
{
	//************************************************************************
	// Start of SQL file.
	//************************************************************************
	var databaseName = GetDatabaseName(strategy, options.DatabaseName);
	var filename = GetFileName(strategy, strategy.ScriptFileExtension);
	fileManager.StartNewFile(filename, strategy.Encoding);

	var details = (strategy.PrimaryKeyStrategy == PrimaryKeyStrategy.Identity ? "Auto incremented primary keys." : string.Empty);
	
	// Add the script file to the package list.
	options.OutputFiles.Add(new OutputFile { Name = filename, Package = strategy.Name, Description = "SQL script to create the Chinook database. " + details });

	// If there is also a database file, then add it to the package list as well.
	if (!string.IsNullOrEmpty(strategy.DatabaseFileExtension))
	{
		var dbfilename = GetFileName(strategy, strategy.DatabaseFileExtension);
		options.OutputFiles.Add(new OutputFile { Name = dbfilename, Package = strategy.Name, Description = "Chinook database file. " + details });
	}
#>

/*******************************************************************************
   Chinook Database - Version <#= options.Version #>
   Script: <#= filename #>
   Description: Creates and populates the Chinook database.
   DB Server: <#= strategy.Name #>
   Author: Luis Rocha
   License: https://github.com/lerocha/chinook-database/blob/master/LICENSE.md
********************************************************************************/

/*******************************************************************************
  WARNING: This file was generated by a tool and changes to this file
           will be lost when this file is regenerated.
********************************************************************************/

<#
	if (strategy.IsReCreateDatabaseEnabled)
	{
		var dropdb = strategy.WriteDropDatabase(databaseName);
		if (!string.IsNullOrEmpty(dropdb)) 
		{
#>
/*******************************************************************************
   Drop database if it exists
********************************************************************************/
<#= dropdb #>
<#= strategy.WriteExecuteCommand() #>

<#
		}
		
		var createdb = strategy.WriteCreateDatabase(databaseName);
		if (!string.IsNullOrEmpty(createdb))
		{
#>
/*******************************************************************************
   Create database
********************************************************************************/
<#= createdb #>
<#= strategy.WriteExecuteCommand() #>

<#
		}
		
		var usedb = strategy.WriteUseDatabase(databaseName);
		if (!string.IsNullOrEmpty(usedb))
		{
#>
<#= usedb #>
<#= strategy.WriteExecuteCommand() #>
<#
		}
	}
	else
	{
		// Cannot recreate the database, so we need to remove foreign keys and tables one by one.
#>
/*******************************************************************************
   Drop Foreign Keys Constraints
********************************************************************************/
<#	
    foreach (DataTable table in tables)
    {
		var foreignKeys = table.Constraints.Cast<Constraint>()
			.Where(constraint => constraint.GetType() == typeof(ForeignKeyConstraint))
			.Select(constraint => (ForeignKeyConstraint) constraint)
			.OrderBy(constraint => constraint.ConstraintName);

        foreach (var fk in foreignKeys)
        {
#>
<#= strategy.WriteDropForeignKey(table.TableName, fk.Columns[0].ColumnName) #>
<#= strategy.WriteExecuteCommand() #>
<#
        }
	}
#>

/*******************************************************************************
   Drop Tables
********************************************************************************/
<# 		foreach (DataTable table in tables) {#>
<#= strategy.WriteDropTable(table.TableName) #>
<#= strategy.WriteExecuteCommand() #>
<#		} 
	}
#>

/*******************************************************************************
   Create Tables
********************************************************************************/
<#
	foreach (DataTable table in tables)
	{
		var tableName = table.TableName;
#>
CREATE TABLE <#= strategy.GetFullyQualifiedName(tableName) #>
(<#

    for (int i = 0; i < table.Columns.Count; i++)
    {
        var column = table.Columns[i];#><#= ( i>0 ? "," : "") #>
    <#= strategy.WriteCreateColumn(column) #><#
	}

	// Create Primary Key Constraint.
    var keys = table.PrimaryKey.Cast<DataColumn>().Select(column => column.ColumnName);
	if (strategy.PrimaryKeyDef==KeyDefinition.OnCreateTableBottom ||
		(strategy.PrimaryKeyDef==KeyDefinition.OnCreateTableColumn && keys.Count() > 1))
	{
		string pkName = strategy.FormatPrimaryKey(tableName);#>,
    CONSTRAINT <#= pkName #> PRIMARY KEY <#= strategy.GetClustered(table)#> (<#= strategy.GetColumns(keys, ',')#>)<#
	}
	
	// Create Foreign Key depending on the strategy.
	if (strategy.ForeignKeyDef==KeyDefinition.OnCreateTableBottom)
	{
		var foreignKeys = table.Constraints.Cast<Constraint>()
			.Where(constraint => constraint.GetType() == typeof(ForeignKeyConstraint))
			.Select(constraint => (ForeignKeyConstraint) constraint)
			.OrderBy(constraint => constraint.ConstraintName);

		foreach (var fk in foreignKeys)
		{
		#>,
    FOREIGN KEY (<#= strategy.GetFullyQualifiedName(fk.Columns[0].ColumnName) #>) REFERENCES <#= strategy.GetFullyQualifiedName(fk.RelatedTable.TableName) #> (<#= strategy.GetFullyQualifiedName(fk.RelatedColumns[0].ColumnName) #>) 
		<#= strategy.WriteForeignKeyDeleteAction(fk) #> <#= strategy.WriteForeignKeyUpdateAction(fk) #><#
		}
	
	}
#>

);
<#= strategy.WriteExecuteCommand() #>
<#
	}	// foreach EntityType
#>


/*******************************************************************************
   Create Primary Key Unique Indexes
********************************************************************************/
<#
    foreach (DataTable table in tables)
    {
		var keys = table.PrimaryKey.Cast<DataColumn>().Select(column => column.ColumnName);
        string tableName = table.TableName;
        string pkIndexName = strategy.FormatName("IPK_" + tableName);
        
        // Create Primary Key Constraint.
        if (strategy.PrimaryKeyDef==KeyDefinition.OnAlterTable)
        {
            string pkName = strategy.FormatPrimaryKey(tableName);
#>
ALTER TABLE <#= tableName #> ADD CONSTRAINT <#= pkName #> PRIMARY KEY (<#= strategy.GetColumns(keys, ',')#>);
<#= strategy.WriteExecuteCommand() #>
<#            
			// Create Primary Key Unique Constraint.
			if (strategy.IsIndexEnabled)
			{
#>
CREATE UNIQUE INDEX <#= pkIndexName #> ON <#= tableName #>(<#= strategy.GetColumns(keys, ',')#>);
<#= strategy.WriteExecuteCommand() #>
<#
			}
        }
   }
#>

/*******************************************************************************
   Create Foreign Keys
********************************************************************************/
<#
    foreach (DataTable table in tables)
    {
		var foreignKeys = table.Constraints.Cast<Constraint>()
			.Where(constraint => constraint.GetType() == typeof(ForeignKeyConstraint))
			.Select(constraint => (ForeignKeyConstraint) constraint)
			.OrderBy(constraint => constraint.ConstraintName);

        foreach (var fk in foreignKeys)
        {
			var toTableName = fk.RelatedTable.TableName;
			var fromTableName = table.TableName;
			var fkName = strategy.FormatForeignKey(fromTableName, fk.Columns[0].ColumnName);
			var ifkName = strategy.FormatForeignKeyIndex(fromTableName, fk.Columns[0].ColumnName);
		
			if (strategy.ForeignKeyDef==KeyDefinition.OnAlterTable)
			{
#>
ALTER TABLE <#= strategy.GetFullyQualifiedName(fromTableName) #> ADD CONSTRAINT <#= fkName #>
    FOREIGN KEY (<#= strategy.FormatName(fk.Columns[0].ColumnName) #>) REFERENCES <#= strategy.GetFullyQualifiedName(toTableName) #> (<#= strategy.FormatName(fk.RelatedColumns[0].ColumnName) #>) <#= strategy.WriteForeignKeyDeleteAction(fk) #> <#= strategy.WriteForeignKeyUpdateAction(fk) #>;
<#= strategy.WriteExecuteCommand() #>
<#      
			} 
		
			// if the foreign keys are part of the primary key on the dependent end, then we should not add a constraint.
			if (strategy.IsIndexEnabled)
			{
#>
CREATE INDEX <#= ifkName #> ON <#= strategy.GetFullyQualifiedName(fromTableName) #> (<#= strategy.FormatName(fk.Columns[0].ColumnName) #>);
<#= strategy.WriteExecuteCommand() #>
<#      
			}
        }
    }
#>

/*******************************************************************************
   Populate Tables
********************************************************************************/
<#
    var maxRows = 1000;
    var sbValues = new StringBuilder();
	char delimiter = ',';

	foreach (DataTable table in ds.Tables)
	{
		var tableName = strategy.GetFullyQualifiedName(table.TableName);

		var columns = table.Columns.Cast<DataColumn>()
			.Where(col => !col.AutoIncrement || strategy.PrimaryKeyStrategy == PrimaryKeyStrategy.None)
			.ToList();
		
		var fields = string.Join($"{delimiter} ", columns
			.Select(col => $"{strategy.FormatName(col.ColumnName)}")
			.ToList());

		for (var i = 0; i < table.Rows.Count; i++)
        {
            var row = table.Rows[i];
            sbValues.Length = 0;

            foreach (var col in columns)
            {
                var value = row[col.ColumnName].ToString();
                if (value.Length == 0 && col.AllowDBNull)
                {
	                value = "NULL";
                }
                else if (col.DataType == typeof(DateTime))
                {
                    value = strategy.FormatDateValue(value);
                }
                else if (col.DataType == typeof(string))
                {
                    value = strategy.FormatStringValue(value);
                }
				
                sbValues.AppendFormat("{0}{1} ", value, delimiter);
            }

            var values = sbValues.ToString().Trim().TrimEnd(delimiter);
            var terminator = (i == table.Rows.Count - 1 || (i > 0 && (i + 1) % maxRows == 0)) ? ";" : ",";
			if (i % maxRows == 0)
            {
#>

<#= $"INSERT INTO {tableName} ({fields}) VALUES" #>
<#
            }
#>
<#= $"    ({values}){terminator}" #>
<#
        }	// foreach DataRow
    }	// foreach DataTable
#>
<#= strategy.WriteFinishCommit() #>
<#
	
	//************************************************************************
	// End of SQL file.
	//************************************************************************
	fileManager.EndBlock();
}	// foreach options.DdlStrategies

foreach (var strategy in options.DdlStrategies.Select(s=> new { s.Name, s.CommandLineFormat }).Distinct())
{
	//************************************************************************
	// Start of Create DB Batch file.
	//************************************************************************
	var filename = string.Format("Create{0}.bat", strategy.Name);
	
	if (!string.IsNullOrEmpty(strategy.CommandLineFormat)) 
	{
		options.OutputFiles.Add(new OutputFile { Name = filename, Package = strategy.Name, Description = "Batch file to create the Chinook database." });
    	fileManager.StartNewFile(filename, Encoding.ASCII);
#>
@echo off
echo Chinook Database Version <#= DataSetHelper.GetVersionNumber() #>
echo.

if "%1"=="" goto MENU
if not exist %1 goto ERROR

set SQLFILE=%1
goto RUNSQL

:ERROR
echo The file %1 does not exist.
echo.
goto END

:MENU
echo Options:
echo.
<# 	
		// Get all files of the same strategy.
		IList<IDdlStrategy> items = options.DdlStrategies.Where(s=>s.Name==strategy.Name).ToList();
		for(int i=0; i<items.Count; i++) 
		{ 
#>
echo <#= (i+1) #>. Run <#= GetFileName(items[i], items[i].ScriptFileExtension) #>
<# 		} #>
echo <#= items.Count+1 #>. Exit
echo.
choice /c 123
<# 		for(int i=0; i<items.Count; i++) { #>
if (%ERRORLEVEL%)==(<#= (i+1) #>) set SQLFILE=<#= GetFileName(items[i],items[i].ScriptFileExtension) #>
<# 		} #>
if (%ERRORLEVEL%)==(<#= items.Count+1 #>) goto END

:RUNSQL
echo.
echo Running %SQLFILE%...
<#= string.Format(strategy.CommandLineFormat, "%SQLFILE%") #>

:END
echo.
set SQLFILE=

<#
		//************************************************************************
		// End of Create DB Batch file.
		//************************************************************************
		fileManager.EndBlock();
	}
}	// foreach options.DdlStrategies

fileManager.Process(true);

// Add files that were not generated here, but will be part of the release.
options.OutputFiles.Add(new OutputFile { Name = "ChinookData.xml", 
										 Package = "XML", 
										 Description = "XML data used to generate the Chinook database SQL scripts." });#>
Chinook Database <#= options.Version #>

This is the list of generated files.
|| Data Source || File || Description ||
<#	foreach (var file in options.OutputFiles.OrderBy(o=>o.Package)) { #>
| <#= file.Package #> | "<#= file.Name #>" | <#= file.Description #> |
<#	} #>
<#+ 

public class OutputFile {
	public string Name { get; set; }
	public string Package { get; set; }
	public string Description { get; set; }
}

private static string GetDatabaseName(IDdlStrategy strategy, string name)
{
	var suffix = strategy.PrimaryKeyStrategy switch {
		PrimaryKeyStrategy.Identity => "_AutoIncrement",
		PrimaryKeyStrategy.Serial => "_Serial",
		_ => string.Empty
		};

	return $"{name}{suffix}";
}

private static string GetFileName(IDdlStrategy strategy, string extension)
{
	var suffix = strategy.PrimaryKeyStrategy switch {
		PrimaryKeyStrategy.Identity => "_AutoIncrementPKs",
		PrimaryKeyStrategy.Serial => "_SerialPKs",
		_ => string.Empty
		};

	return $"Chinook_{strategy.Name}{suffix}.{extension}";
}

private static string GetValues(IEnumerable<string> values, char delimiter)
{
    var builder = new StringBuilder();
    foreach (var value in values)
    {
        builder.AppendFormat("{0}{1}", value, delimiter);
    }
    return builder.ToString().TrimEnd(delimiter);
}

#>
